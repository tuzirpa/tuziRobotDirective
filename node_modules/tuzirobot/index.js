"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const commonUtil = require("./commonUtil-CZ1eZJiG.js");
const fs = require("fs");
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const extendDirective = require("../../extend");
const extend = extendDirective || {};
const systemDirective = require("../../system");
const system = systemDirective || {};
const robotUtil = {
  sendLog: commonUtil.sendLog,
  // dataProcessing,
  // web,
  // flowControl,
  // wait,
  extend,
  system
};
function forRobotUtil(obj) {
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      const value = obj[key];
      if (typeof value === "function") {
        let retryCountNum = 0;
        obj[key] = async function aaa(...args) {
          const blockInfo = args[args.length - 1];
          try {
            commonUtil.sendStepLog(
              JSON.stringify({
                level: "info",
                time: Date.now(),
                message: `执行指令${blockInfo.directiveDisplayName}`,
                data: blockInfo
              })
            );
            const result = await value.apply(this, args);
            return result;
          } catch (error2) {
            commonUtil.olog(error2);
            commonUtil.sendLog(
              "error",
              `执行指令 ${blockInfo.directiveDisplayName} 异常: ${error2.message}`,
              blockInfo,
              error2
            );
            if (blockInfo.failureStrategy === "terminate") {
              commonUtil.sendLog(
                "error",
                `执行指令 ${blockInfo.directiveDisplayName} 异常,终止流程`,
                blockInfo
              );
              process.exit(1);
            } else if (blockInfo.failureStrategy === "ignore") {
              commonUtil.sendLog(
                "error",
                `执行指令 ${blockInfo.directiveDisplayName} 异常 ,忽略错误`,
                blockInfo
              );
              return null;
            } else {
              retryCountNum++;
              if (retryCountNum > blockInfo.retryCount) {
                commonUtil.sendLog(
                  "error",
                  `执行指令 ${blockInfo.directiveDisplayName} 异常 ,重试次数达到上限`,
                  blockInfo
                );
                process.exit(1);
              } else {
                commonUtil.sendLog(
                  "error",
                  `执行指令 ${blockInfo.directiveDisplayName} 异常 ,${blockInfo.intervalTime} 秒后重试第${retryCountNum}次`,
                  blockInfo
                );
              }
              await sleep(blockInfo.intervalTime * 1e3);
              console.log("重试执行指令", this, ...args);
              return aaa.apply(this, args);
            }
          }
        };
      } else {
        forRobotUtil(value);
      }
    }
  }
}
forRobotUtil(robotUtil);
const generateBlock = (blockLine, flowName, directiveName, directiveDisplayName, failureStrategy, intervalTime, retryCount) => {
  return {
    blockLine,
    flowName,
    directiveName,
    directiveDisplayName,
    failureStrategy,
    intervalTime,
    retryCount
  };
};
const fatalError = (error, fileName) => {
  const reg = new RegExp(`\\(${fileName.replace(/\\/g, "\\\\")}:(\\d+):(\\d+)\\)`);
  const match = error.stack.match(reg);
  const lineNumber = match[1];
  const curFileContent = fs.readFileSync(fileName, "utf8");
  const lineContent = curFileContent.split("\n")[lineNumber - 1];
  const generateBlockCode = lineContent.trim().match(/generateBlock\(.*?\)/);
  commonUtil.olog(error);
  if (generateBlockCode && generateBlockCode[0]) {
    robotUtil.sendLog(
      "fatalError",
      "致命错误,退出流程:" + error.message,
      eval(generateBlockCode[0])
    );
  } else {
    robotUtil.sendLog("fatalError", "致命错误,退出流程:" + error.message, {
      blockLine: -1,
      flowName: "未知流程",
      directiveName: "",
      directiveDisplayName: "",
      failureStrategy: "terminate",
      intervalTime: 0,
      retryCount: 0
    });
  }
};
exports.default = robotUtil;
exports.fatalError = fatalError;
exports.generateBlock = generateBlock;
exports.robotUtil = robotUtil;
